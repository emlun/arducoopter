2012-08-07

Improved the LabView control interface.

Made the computer capable of sending a continuously changing
destination in the shape of a figure-eight. Even at 20 mHz in the X
direction and 40 mHz in the Y direction, with amplitudes 3 m (X) and 2
m (Y) the quadrotor had trouble keeping up and was often two or three
meters behind.

Expanded the flying area a bit - since we send analog position signals
to the quadrotor, the positions we can express are confined to
pre-defined intervals. We expanded these and tried flying over the
reactor pit. It went quite well, the quadrotor seemed a bit confused
and wobbled a bit up and down but didn't drop quickly as one might
have expected.

Started working a little bit on a second quadrotor.

Erik started working on the report.

2012-08-06
(Log written 2012-08-07)

Spent the first half of the day debugging a few statements of the form
"Location l; l.lat=1; l.lng=2; l.alt=3" where lat was set to 1, lng
not at all, and alt to 3. The problem turned out to be our print
statement. We used a printf-style print function and used the %d
specifier to print int32_t type values. It turns out that Arduino's
word length is 16 bit, meaning the first %d read the low bits of the
first argument, the second read the high bits (which were all zero),
the third read the low bits of the second argument, and the third
argument was not printed at all.

With that settled, we tried again with sending a destination and
having the copter fly there. This time it worked, so we worked a bit
more with the LabView interface.

2012-08-03

Repaired the copter and test flew it. Tweaked flight regulator
settings. Started testing with sending a destination position to the
copter. In the first test flight the copter thought it was some 10-11
km off target and crashed immediately. It seems the destination data
is not received correctly.

Most of the afternoon was spent trying to work out what's wrong with
the destination data. It is confirmed to arrive on the copter
correctly, but somewhere along the way some assignment goes wrong and
the axes are all screwed up. We haven't found the cause yet.

2012-08-02

Moved the LabView program to the assigned computer. Had to downgrade
the version of the program and fix a few things that turned out to be
incompatible across versions.

Worked on perfecting computer-only control. Height control acted up a
bit until we realised the sonar was not connected. We also had some
problems with the LAND mode, which did not seem to trigger for some
reason, being a bit too violent when landing. Anyway, we have now set
the copter up to be controlled via LabView only, without radio.

We made a bug in the code where we set the target location when
entering LOITER. We changed it to be the origin, but an oversight made
the altitude of the new target probably be assigned randomly. As a
result, the copter shot up in the ceiling and got stuck on the
"HVILAN" crane. Only a propeller and perhaps the treads in a screw
hole on one of the motors was destroyed, though.

2012-08-01

Assembled a new copter after yesterday's crash, took almost until
lunch to finish.

Worked on making the copter take off safely. We tried controlling
takeoff via LabView, but it was too unreliable. Instead, we modified
LOITER mode so that the user has no control of the waypoint height
(changed LOITER_THR from THROTTLE_HOLD to THROTTLE_AUTO) and made
THROTTLE_AUTO successively raise g.throttle_cruise if the sonar
reports a height less than 30 cm. This solution worked really well.

2012-07-31

Worked with altitude control. Due to the behaviour of LOITER, we
cannot take off in this mode. We would like to be able to, since that
would make it possible to eliminate the mode selection channel and use
6 6 of the 7 available channels for sending positioning data (3D
position and 3D destination), and the last channel for controlling the
throttle.

We let the LabView program control the flight mode and made it go into
LOITER when the copter has moved a set distance (about 30-50 cm) from
the start position. We had some problems with the distance signal,
derived from UbiSense, being too noisy, but it eventually just seemed
to work. This solution seems promising, but is a bit unreliable since
the distance signal is noisy.

We also achieved a spectacular crash. We believed LOITER mode had been
engaged and gave some increased throttle in order to slightly rise
over an obstacle. At that instant, LOITER was engaged and took the
high throttle setting as equillibrium hover throttle. As a result, the
copter shot up into the ceiling, despite us cutting the throttle
signal, was thrown off balance and lost a propeller or two, then
plummeted some 9 metres to its death. The "bridge" and all circuitry
was still intact afterwards, but all four copter arms were damaged.

2012-07-30
Back from 2 week vacation.
Tried to work out what's wrong when flying in R1. Wrote magnetic field
logging and testing modes.
Turns out we were using the wrong coordinate system all along. When we
changed the rotation of the UbiSense position from 135 degrees to -135
degrees, the copter suddenly behaved. It seems we were "keeping the
coordinate system fixed and rotating the vector" instead of "keeping
the vector fixed and rotating the coordinate system".
Next goal will be to update next_WP with a target destination and get
the quadrotor to follow.

2012-07-13
Worked on getting UbiSense positioning to work. Before lunch we were
mostly frustrated and couldn't get anything to work. Somewhere around
12, Erik did something, or didn't, we don't quite know, and suddenly the
copter hovered in place almost perfectly. We managed to repeat this
twice or so, but when we tried to figure out what had changed it went
back to not working. We suspect the magnetic field in R1 is messed up,
which means the quadrotor gets confused and can't keep track of its
heading.

2012-07-12
Failed to write log.

2012-07-11
Managed to get UbiSense data into LabView. Did some research on what
channels are used for what, what is hard-coded in Arduino and so on.

2012-07-10
(Log written 2012-07-11)
Managed to send data over TMotes from Java. Wrote a Java program that
acts as a virtual radio controller. Performed some test flights with
different parameters for the automatic controllers.

2012-07-09
Assembled and tested a new quadrotor since the recent crash. Flew a bit.
One propeller shattered, probably due to vibrations caused by one of the
propeller mount bolts being slightly bent. Otherwise worked okay.

Erik got the TinyOS stuff working. He got a TinyOS installation from
Axel and after that we could compile and install Tmote apps just fine.

Wrote a simple Java program that attempts to send a packet of data to a
tmote. Judging by the LEDs on the motes, the packet gets sent and is
received, but the pololu doesn't seem to notice.

2012-07-06
Tried flying some more. Somehow the control parameters had been
accidentally changed to some insane values, which we changed
back. Added logging of INS data and went out to try it. Something
strange happened on two occasions. While in flight in LOITER mode, the
quad suddenly killed the engines, plummeting to the ground from some
4-8m high. The second crash bent one of the quad arms. We still do not
know what happened, but it seems like the quad either disarmed the
motors or suddenly restarted in midair.

Refactored the logging system a bit while Erik worked on plotting the
log data in MATLAB and getting the Tmotes to work.

2012-07-05
(Log written 2012-07-06)

Tried flying some more. After flipping the coordinate axes so they
agreed, the behaviour improved dramatically. No longer did it just
take off in a random direction, but instead flew in outward spirals
around the target location. Spent most of the day trying to figure out
what was wrong. Disabling inertial navigation in the Z direction
improved altitude hold, but not by much.

Erik found an online ArduCopter simulator. When given the control
settings set on board the quad, even the simulation diverged much in
the same way as the real thing. Using the simulator we selected
parameters that seemed good and went out to try again. It worked like
a charm.

Many plastic pieces were consumed by a few crashes today.

2012-07-04
(Log written 2012-07-06)

We tried flying the quad in LOITER mode in Maskinparken. It behaved
very oddly. Later in the day we realised that navigation.pde and
inertia.pde have different coordinate systems and set out to change
this.

2012-07-03
Started working with the Tmotes. Tried to compile and run a bunch of
Tmote code but couldn't make it work. Managed to install and run
TinyOS's SerialForwarder Java utility and wrote a Java program that ran
a handshake routine. That worked, but all attempts at compiling
applications for installation on the mote failed.
(The following written 2012-07-04)
Incorporated inertial navigation into LOITER mode, and went outside to
test it. After a whole lot of confusion and frustration, managed to get
the quadrotor to fly. LOITER did not seem to hold position very well,
but I didn't let it fly very far either.

2012-07-02
Tweaked inertial navigation parameters a bit, took the circuit for
another walk and did some more tests on inertial navigation. After all,
inertial navigation might actually improve the quadrotor's ability to
stabilize and hover at a given location. The test results this time did
indicate that inertial navigation gives a not-so-bad indication of small
scale movements.
Read a little about the Kalman filter.

2012-06-29
(Log written 2012-07-02)
Added inclusion of position data from external positioning system to
inertial navigation system. Took the circuit for a walk and analyzed the
results. The results did not quite indicate that inertial navigation
would improve the position estimate.

2012-06-28
(Log written 2012-07-02)
Added a test mode that prints lots of sensor data, and some processed
data as well.

2012-06-27
Read a little more on the report.
Worked with inertial navigation: tried to implement a Kalman filter and
performed some tests by logging and plotting inertial data readings.

2012-06-26
Wrote a test module that flashes the LEDs on the Arduino board.
Discussed Kalman filtering a lot with Erik.
Read the final report from EL2420, fall 2011.

2012-06-25

Cloned ArduPilot repository on Google Code and published changes to
the repository.
Tried to give Erik permission to push to the repo but didn't get it to
work.
Changed arm/rearm motors control to roll control instead of yaw
control, since yaw is broken on our controller.
Tried to help Erik resurrect his computer after a strange crash where
nothing at all happened after POST.


2012-06-21

Visited the reactor hall. Returned to the lab and tried to connect and
calibrate radio controller. Attempted to fly the quadrotor with radio
control, yaw control seems to be broken which made the quadrotor arm
the motors randomly. Discovered that failsafe seems to be to max the
throttle, investigated arduino code for the cause of this. The
failsafe seems to be to rise 10 m, but we did not give it the chance
to do that while testing.
